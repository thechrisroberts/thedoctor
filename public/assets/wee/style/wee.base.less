// Wee 2.0.0 (weepower.com)
// Licensed under Apache 2 (http://www.apache.org/licenses/LICENSE-2.0)
// DO NOT MODIFY THIS FILE

* {
	&,
	&:before,
	&:after {
		margin: 0;
		outline: 0;
		padding: 0;
		.border-box();
	}
}
.wee-container-min-width () when not (@minWidth = 0)
		and not (@minWidth = false) {
	html,
	body {
		.min-width(@minWidth);
	}
}
.wee-container-min-width();
html {
	-ms-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
	font-family: '"1"';
	.font-size(@rootFontSize);
}
body {
	color: @baseColor;
	position: relative;
	.font(@baseFont; @baseFontSize; @baseFontWeight);
	.line-height(@baseLineHeight);
	.wee-body-background () when not (@bodyBackground = false) {
		.background();
	}
	.wee-body-background();
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
	display: block;
}
embed,
img,
object {
	max-width: 100%;
}
embed,
object {
	height: 100%;
}
audio,
canvas,
video {
	display: inline-block;
}
.wee-abbr () when not (@abbrUnderline = none) {
	.border(bottom; @baseColor; 1px; @abbrUnderline);
}
abbr[title] {
	cursor: help;
	.wee-abbr();
}
b,
strong,
.bold {
	font-weight: @boldFontWeight;
}
mark {
	color: @markColor;
	.background(@markBackground);
}
canvas {
	-ms-touch-action: double-tap-zoom;
}
iframe {
	.spaced()
}
.wee-figure () {
	text-align: center;
	position: relative;
	.padding(@figurePadding);
	.spaced();
	img {
		.spaced();
	}
	figcaption {
		color: @figCaptionColor;
		font-style: @figCaptionFontStyle;
		.line-height(@figCaptionLineHeight);
	}
}
.wee-figure () when not (@figureRounded = 0)
		and not (@figureRounded = false) {
	.rounded(@figureRounded);
}
.wee-figure () when not (@figureBorderColor = false) {
	.border(@figureBorderColor);
}
figure {
	.wee-figure();
}
img {
	-ms-interpolation-mode: bicubic;
	display: inline-block;
}
sub,
sup {
	font-size: .6em;
	line-height: 0;
	margin-left: .3em;
	position: relative;
	vertical-align: baseline;
}
sub {
	bottom: -.25em;
}
sup {
	top: -1em;
}
::-moz-selection {
	.selection();
}
::selection {
	.selection();
}

////////////////
// Typography //
////////////////

h1,
h2,
h3,
h4,
h5,
h6,
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
.heading {
	color: @headingColor;
	font-family: @headingFont;
	font-weight: @headingFontWeight;
	.line-height(@headingLineHeight);
	.spaced(@headingMarginBottom);
	small {
		font-weight: normal;
	}
}
h1,
.h1 {
	.font-size(@h1);
}
h2,
.h2 {
	.font-size(@h2);
}
h3,
.h3 {
	.font-size(@h3);
}
h4,
.h4 {
	.font-size(@h4);
}
h5,
.h5 {
	.font-size(@h5);
}
h6,
.h6 {
	.font-size(@h6);
}
.subheading {
	color: @subHeadingColor;
	font-weight: @subHeadingFontWeight;
}
p {
	color: @paragraphColor;
	font-weight: @paragraphFontWeight;
	.line-height(@paragraphLineHeight);
	.spaced(@paragraphMarginBottom);
}
small {
	.font-size(@smallFontSize);
}
dfn,
em,
i,
var,
.italic {
	font-style: italic;
}
blockquote,
q {
	color: @quoteColor;
	.font(@quoteFont; @quoteFontSize; @quoteFontWeight; @quoteLineHeight; @quoteFontStyle);
	cite {
		color: @citeColor;
		.font(@citeFont; @citeFontSize; @citeFontWeight; @citeLineHeight; @citeFontStyle);
		.margin(top; @citeMarginTop);
		&:before {
			.content(@citeIndicator);
		}
	}
	p {
		color: @quoteColor;
	}
}
.wee-blockquote () {
	.padding(@quotePaddingVertical; @quotePaddingHorizontal);
	.spaced();
	cite {
		display: block;
	}
}
.wee-blockquote () when not (@quoteBorderWidth = 0)
		and not (@quoteBorderWidth = false) {
	.border(left; @quoteBorderColor; @quoteBorderWidth);
}
blockquote,
.blockquote {
	.wee-blockquote();
}
.wee-code () when (@codeEnabled = true) {
	.rules () {
		color: @codeColor;
		.background(@codeBackground);
		.font(@codeFont; @codeFontSize);
		.line-height(@codeLineHeight);
		.padding(@codePaddingVertical; @codePaddingHorizontal);
	}
	.rules () when not (@codeRounded = 0)
			and not (@codeRounded = false) {
		.rounded(@codeRounded);
	}
	.rules () when not (@codeBorderColor = false) {
		.border(@codeBorderColor);
	}
	code,
	kbd,
	samp {
		.rules();
	}
}
.wee-code();
.wee-code-block () when (@codeEnabled = true) {
	.rules () {
		-moz-tab-size: @codeBlockTabSize;
		tab-size: @codeBlockTabSize;
		.background(@codeBlockBackground);
		.padding(@codeBlockPaddingVertical; @codeBlockPaddingHorizontal);
		.spaced();
		code {
			.sub-rules () when not (@codeBorderColor = false) {
				border: none;
			}
			background: none;
			color: @codeBlockColor;
			display: block;
			padding: 0;
			.font(@codeBlockFont; @codeBlockFontSize);
			.sub-rules();
		}
	}
	.rules () when not (@codeBlockRounded = 0)
			and not (@codeBlockRounded = false) {
		.rounded(@codeBlockRounded);
	}
	.rules () when not (@codeBlockBorderColor = false) {
		.border(@codeBlockBorderColor);
	}
	pre {
		.rules();
	}
}
.wee-code-block();
del,
s,
strike {
	text-decoration: line-through;
}
a {
	color: @linkColor;
	outline: 0;
	text-decoration: @linkDecoration;
	&:focus {
		outline: thin dotted;
	}
	&:hover {
		color: @linkColorHover;
		.check () when not (@linkDecorationHover = false) {
			text-decoration: @linkDecorationHover;
		}
		.check();
	}
	&:active {
		color: @linkColorActive;
	}
	img {
		border: 0;
	}
}
hr,
.hr {
	border: 0;
	display: block;
	height: 1px;
	.border(top; @ruleColor; @ruleHeight; @ruleStyle);
	.margin(vertical; @ruleMargin);
}
address {
	color: @addressColor;
	.font(@addressFont; @addressFontSize; @addressFontWeight; @addressLineHeight; @addressFontStyle);
	.spaced();
}

///////////
// Lists //
///////////

dl,
ol,
ul {
	color: @listColor;
	list-style-position: @listBulletPosition;
	.line-height(@listLineHeight);
	.spaced(@listMarginBottom);
	.check () when not (@liMarginBottom = false) {
		li {
			.spaced(@liMarginBottom);
		}
	}
	.check();
}
.wee-list-margin () when not (@listMarginLeft = 0)
		and not (@listMarginLeft = false) {
	.margin(left; @listMarginLeft);
}
ol,
ul {
	.wee-list-margin();
	ol,
	ul {
		margin-bottom: 0;
		.margin(left; @nestedListMarginLeft);
	}
}
ul {
	list-style-type: @listBulletStyle;
	ul {
		list-style-type: circle;
		ul {
			list-style-type: square;
		}
	}
}
ol {
	list-style-type: decimal;
}
nav {
	ol,
	ul {
		margin: 0;
		list-style: none;
		li {
			margin-bottom: 0;
		}
	}
}
dl {
	.spaced(@dlMarginBottom);
}
dt {
	color: @dtColor;
	.font(@dtFont; @dtFontSize);
	.spaced(@dtMarginBottom);
}
dd {
	color: @ddColor;
	.font(@ddFont; @ddFontSize);
	.spaced(@ddMarginBottom);
}

////////////
// Tables //
////////////

.wee-table () when (@tableEnabled = true) {
	.rules () {
		-ms-word-wrap: break-word;
		border-collapse: collapse;
		border-spacing: 0;
		empty-cells: show;
		min-width: 100%;
		table-layout: fixed;
		word-wrap: break-word;
		.spaced();
		td,
		th {
			text-align: left;
			vertical-align: top;
			.line-height(@tableCellLineHeight);
			.padding(@tableCellPaddingVertical; @tableCellPaddingHorizontal);
		}
		thead,
		tfoot {
			.bold();
			th {
				vertical-align: bottom;
				.darkestGray();
			}
		}
		tbody {
			.wee-table-striped(@tableStriped);
		}
		caption {
			.background(@tableCaptionBackground);
			.font-style(@tableCaptionFontStyle);
			.padding(@tableCaptionPaddingVertical; @tableCaptionPaddingHorizontal);
		}
		img {
			vertical-align: top;
		}
		.wee-table-bordered(@tableBordered);
	}
	.check () when (@tableStyled = true) {
		table,
		.table {
			.rules();
		}
	}
	.check () when not (@tableStyled = true) {
		.table {
			.rules();
		}
	}
	.table-bordered () when not (@tableBordered = true) {
		.table-bordered {
			.wee-table-bordered(true);
		}
	}
	.table-striped () when not (@tableStriped = true)
			and not (@tableStripedBackground = false) {
		.table-striped {
			.wee-table-striped(true);
		}
	}
	.table-bordered();
	.table-striped();
	.check();
}
.wee-table-bordered (@output) when (@output = true) {
	.border(bottom; @tableCellBorderColor);
	caption {
		.border(@tableCellBorderColor);
		border-bottom: 0;
	}
	td,
	th {
		.border(right; @tableCellBorderColor);
		.border(top; @tableCellBorderColor);
		&:first-child {
			.border(left; @tableCellBorderColor);
		}
	}
}
.wee-table-striped (@output) when (@output = true)
		and (@tableStripedPosition = even) {
	tr {
		&:nth-child(even) {
			td {
				.background(@tableStripedBackground);
			}
		}
	}
}
.wee-table-striped (@output) when (@output = true)
		and not (@tableStripedPosition = even) {
	tr {
		&:nth-child(odd) {
			td {
				.background(@tableStripedBackground);
			}
		}
	}
}
.wee-table();

///////////
// Forms //
///////////

.wee-form () when (@formEnabled = true) {
	form {
		.spaced();
	}
	button,
	input,
	select,
	textarea {
		margin: 0;
		.font(@inputFont; @inputFontSize; normal);
	}
	button::-moz-focus-inner,
	input::-moz-focus-inner {
		border: 0;
		padding: 0;
	}
	.input-placeholder();
	fieldset {
		border: 0;
		.spaced();
	}
	legend {
		border: 0;
		color: @legendColor;
		.font(@legendFont; @legendFontSize);
		.line-height();
		.spaced-block(@legendMarginBottom);
	}
	label {
		font-weight: @labelFontWeight;
		line-height: @labelLineHeight;
		.spaced-block(@labelMarginBottom);
	}
	input[type='checkbox'],
	input[type='radio'] {
		padding: 0;
		.margin(right; @checkboxMarginRight);
	}
	.input () {
		-moz-appearance: none;
		-webkit-appearance: none;
		color: @inputColor;
		width: 100%;
		.background(@inputBackground);
		.background-clip();
		.padding(@inputPaddingVertical; @inputPaddingHorizontal);
		.spaced(@inputMarginBottom);
		&:focus {
			&:required {
				&:invalid {
					color: @inputColorInvalid;
					.background(@inputBackgroundInvalid);
					.border(@inputBorderColorInvalid);
				}
			}
		}
		&:invalid {
			color: @inputColorInvalid;
			.background(@inputBackgroundInvalid);
			.border () when not (@inputBorderWidthInvalid = 0)
					and not (@inputBorderWidthInvalid = false) {
				.border(@inputBorderColorInvalid; @inputBorderWidthInvalid);
				&:hover {
					.border(@inputBorderColorInvalidHover);
				}
				&:focus {
					.border(@inputBorderColorInvalidFocus);
				}
			}
			.border () when (@inputBorderWidthInvalid = 0), (@inputBorderWidthInvalid = false) {
				border-width: 0;
			}
			.border();
		}
		&:required {
			color: @inputColorRequired;
			.background(@inputBackgroundRequired);
			.border(@inputBorderColorRequired);
			.border () when not (@inputBorderWidthRequired = 0)
					and not (@inputBorderWidthRequired = false) {
				.border(@inputBorderColorRequired; @inputBorderWidthRequired);
				&:hover {
					.border(@inputBorderColorRequiredHover);
				}
				&:focus {
					.border(@inputBorderColorRequiredFocus);
				}
			}
			.border () when (@inputBorderWidthRequired = 0), (@inputBorderWidthRequired = false) {
				border-width: 0;
			}
			.border();
		}
	}
	.input () when not (@inputBorderWidth = 0)
			and not (@inputBorderWidth = false) {
		.border(@inputBorderColor; @inputBorderWidth);
		&:hover {
			.border(@inputBorderColorHover);
		}
		&:focus {
			.border(@inputBorderColorFocus);
		}
	}
	.input () when (@inputBorderWidth = 0), (@inputBorderWidth = false) {
		border-width: 0;
	}
	.input () when not (@inputMinHeight = false) {
		.min-height(@inputMinHeight);
	}
	.input () when not (@inputMinWidth = false) {
		.min-width(@inputMinWidth);
	}
	.input () when not (@inputRounded = false) {
		.rounded(@inputRounded);
	}
	.input () when (@inputEnableInnerShadow = true) {
		.shadow(inner; dark; .1; 1px; 1px; 2px; 0);
	}
	.input () when (@inputEnableFocusOuterShadow = true) {
		&:focus {
			.shadow(dark; .1; 0; 0; 2px; 2px);
		}
	}
	input[type='email'],
	input[type='file'],
	input[type='number'],
	input[type='password'],
	input[type='search'],
	input[type='tel'],
	input[type='text'],
	textarea,
	select {
		.input();
	}
	input[type='search']::-webkit-search-decoration {
		display: none;
	}
	input[type='button'],
	input[type='reset'],
	input[type='submit'] {
		-moz-appearance: none;
		-webkit-appearance: none;
		cursor: pointer;
	}
	select {
		cursor: pointer;
		outline: 0;
		.padding(right; @inputPaddingVertical);
		&[multiple] {
			vertical-align: top;
			.min-height(@multiSelectMinHeight);
			&:after {
				content: ' ';
			}
		}
	}
	textarea {
		vertical-align: top;
		.line-height(@textareaLineHeight);
		.min-height(@textareaMinHeight);
		.padding(@textareaPaddingVertical; @textareaPaddingHorizontal);
		.resizable(@textareaResize);
	}
	input[disabled] {
		color: @inputColorDisabled;
		cursor: @inputCursorDisabled;
		.background-color(@inputBackgroundDisabled);
	}
	.inline-field {
		button,
		input,
		select,
		textarea {
			display: inline-block;
			width: auto;
		}
		label {
			display: inline-block;
			.margin(right; @labelMarginRight);
		}
	}
}
.wee-form();

/////////////
// Buttons //
/////////////

.wee-button () when (@buttonEnabled = true) {
	.rules () {
		-webkit-tap-highlight-color: @buttonBackgroundHover;
		color: @buttonColor;
		cursor: pointer;
		display: inline-block;
		line-height: 1em;
		text-align: center;
		text-shadow: none;
		.background(@buttonBackground);
		.font(@buttonFont; @buttonFontSize; @buttonFontWeight);
		.spaced(@buttonMarginBottom);
		.padding(@buttonPaddingVertical; @buttonPaddingHorizontal);
		&:hover {
			color: @buttonColor;
			.background-color(@buttonBackgroundHover);
		}
		&:active {
			color: @buttonColor;
			.background-color(@buttonBackgroundActive);
		}
	}
	.rules () when not (@buttonRounded = false) {
		.rounded(@buttonRounded);
	}
	.rules () when not (@buttonBorderColor = false) {
		.border(@buttonBorderColor);
	}
	.rules () when (@buttonBorderColor = false) {
		.border(0);
	}
	.rules () when (@buttonBevelEnabled = true) {
		.shadow(inner; @buttonBevelColor; @buttonBevelOpacity; 0px);
	}
	.rules () when (@buttonTransitionEnabled = true) {
		.transition(background-color);
	}
	.colored-rules () {
		-webkit-tap-highlight-color: @coloredButtonBackgroundHover;
		border-color: @coloredButtonBorderColor;
		color: @coloredButtonColor;
		.background(@coloredButtonBackground);
		&:hover {
			color: @coloredButtonColor;
			.background-color(@coloredButtonBackgroundHover);
		}
		&:active {
			color: @coloredButtonColor;
			.background-color(@coloredButtonBackgroundActive);
		}
	}
	.disabled-rules () {
		cursor: @disabledButtonCursor;
		&,
		&:active,
		&:hover {
			color: @disabledButtonColor;
			.background(@disabledButtonBackground);
		}
	}
	.disabled-rules () when not (@buttonBorderColor = false) {
		.border(@disabledButtonBorderColor);
	}
	.check () when (@buttonStyled = true) {
		button,
		input[type='button'],
		input[type='reset'],
		input[type='submit'],
		.button {
			.rules();
			&.button-colored {
				.colored-rules();
			}
			&[disabled],
			&.button-disabled {
				.disabled-rules();
			}
		}
	}
	.check () when not (@buttonStyled = true) {
		.button {
			.rules();
		}
		.button-colored {
			.colored-rules();
		}
		.button[disabled],
		.button-disabled {
			.disabled-rules();
		}
	}
	.check();
	button[disabled] {
		cursor: @disabledButtonCursor;
	}
}
.wee-button();